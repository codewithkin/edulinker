generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Plan {
  FREE
  PRO
  ULTIMATE
}

enum Curriculum {
  IGCSE
  CBSE
  CAMBRIDGE
  ZIMSEC
  OTHER
}

enum LessonStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  IN_PROGRESS
}

model Teacher {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  number           String
  bio              String?
  available_days   Json
  age              Int
  location         String
  experience       String
  cv_upload        String
  education_upload String
  entry_video      String
  hourlyRate       Float
  profile_picture  String
  curriculum       Curriculum
  joined           DateTime    @default(now())
  verified         Boolean     @default(false)
  plan             Plan        @default(FREE)
  gender           Gender
  subjects         Subject[]   @relation("TeacherSubjects")
  reviews          Review[]
  students         Student[]
  lessons          Lesson[]    @relation("TeacherLessons")
  videoCalls       VideoCall[] @relation("TeacherVideoCalls")
  Note             Note[]
}

model Student {
  id              String      @id @default(uuid())
  name            String
  educationLevel  String
  location        String
  curriculum      Curriculum
  subjects        Subject[]   @relation("StudentSubjects")
  bio             String?
  plan            Plan        @default(FREE)
  profile_picture String
  email           String      @unique
  number          String
  joined          DateTime    @default(now())
  gender          Gender
  prefers         Gender
  teachers        Teacher[]
  lessons         Lesson[]    @relation("StudentLessons")
  notes           Note[]
  videoCalls      VideoCall[] @relation("StudentVideoCalls")
}

model Subject {
  id       String    @id @default(uuid())
  name     String
  teachers Teacher[] @relation("TeacherSubjects")
  students Student[] @relation("StudentSubjects")
  lessons  Lesson[]
}

model Review {
  id        String  @id @default(uuid())
  rating    Int
  name      String
  profile   String
  text      String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
}

model Lesson {
  id         String       @id @default(uuid())
  title      String
  subject    Subject?     @relation(fields: [subjectId], references: [id])
  subjectId  String?
  rating     Int?
  createdAt  DateTime     @default(now())
  length     Int // duration in minutes
  status     LessonStatus
  teacher    Teacher      @relation("TeacherLessons", fields: [teacherId], references: [id])
  teacherId  String
  student    Student      @relation("StudentLessons", fields: [studentId], references: [id])
  studentId  String
  notes      Note[]
  videoCalls VideoCall[]
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
  teacherId String?
  Lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  String?
}

model VideoCall {
  id         String   @id @default(uuid())
  length     Int // duration in seconds or minutes
  createdAt  DateTime @default(now())
  transcript String?
  video_url  String
  student    Student  @relation("StudentVideoCalls", fields: [studentId], references: [id])
  studentId  String
  teacher    Teacher  @relation("TeacherVideoCalls", fields: [teacherId], references: [id])
  teacherId  String
  Lesson     Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId   String?
}
